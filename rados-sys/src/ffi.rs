/* automatically generated by rust-bindgen */

pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulong;
pub type int_least8_t = ::libc::c_char;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_char;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intptr_t = ::libc::c_long;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __val: [::libc::c_int; 2us],
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Struct_Unnamed1 { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type size_t = ::libc::c_ulong;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __val: [::libc::c_ulong; 16us],
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Struct_Unnamed2 { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed2;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Struct_timespec { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Struct_timeval { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub __fds_bits: [__fd_mask; 16us],
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Struct_Unnamed3 { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed3;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7us],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Union_pthread_attr_t { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Struct___pthread_internal_list {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed4 {
    pub _bindgen_data_: [u64; 5us],
}
impl Union_Unnamed4 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 40us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed4 {
    fn default() -> Union_Unnamed4 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Struct___pthread_mutex_s {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_mutex_t = Union_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed5 {
    pub _bindgen_data_: [u32; 1us],
}
impl Union_Unnamed5 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed5 {
    fn default() -> Union_Unnamed5 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed6 {
    pub _bindgen_data_: [u64; 6us],
}
impl Union_Unnamed6 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed7 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 48us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_longlong {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed6 {
    fn default() -> Union_Unnamed6 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Struct_Unnamed7 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed8 {
    pub _bindgen_data_: [u32; 1us],
}
impl Union_Unnamed8 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed8 {
    fn default() -> Union_Unnamed8 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed8;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed9 {
    pub _bindgen_data_: [u64; 7us],
}
impl Union_Unnamed9 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed10 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed9 {
    fn default() -> Union_Unnamed9 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __rwelision: ::libc::c_char,
    pub __pad1: [::libc::c_uchar; 7us],
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Struct_Unnamed10 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed9;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed11 {
    pub _bindgen_data_: [u64; 1us],
}
impl Union_Unnamed11 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 8us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed11 {
    fn default() -> Union_Unnamed11 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed11;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed12 {
    pub _bindgen_data_: [u64; 4us],
}
impl Union_Unnamed12 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 32us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed12 {
    fn default() -> Union_Unnamed12 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed12;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed13 {
    pub _bindgen_data_: [u32; 1us],
}
impl Union_Unnamed13 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed13 {
    fn default() -> Union_Unnamed13 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed13;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_iovec {
    pub iov_base: *mut ::libc::c_void,
    pub iov_len: size_t,
}
impl ::std::default::Default for Struct_iovec {
    fn default() -> Struct_iovec { unsafe { ::std::mem::zeroed() } }
}
pub type socklen_t = __socklen_t;
pub type Enum___socket_type = ::libc::c_uint;
pub const SOCK_STREAM: ::libc::c_uint = 1;
pub const SOCK_DGRAM: ::libc::c_uint = 2;
pub const SOCK_RAW: ::libc::c_uint = 3;
pub const SOCK_RDM: ::libc::c_uint = 4;
pub const SOCK_SEQPACKET: ::libc::c_uint = 5;
pub const SOCK_DCCP: ::libc::c_uint = 6;
pub const SOCK_PACKET: ::libc::c_uint = 10;
pub const SOCK_CLOEXEC: ::libc::c_uint = 524288;
pub const SOCK_NONBLOCK: ::libc::c_uint = 2048;
pub type sa_family_t = ::libc::c_ushort;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::libc::c_char; 14us],
}
impl ::std::default::Default for Struct_sockaddr {
    fn default() -> Struct_sockaddr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_align: ::libc::c_ulong,
    pub __ss_padding: [::libc::c_char; 112us],
}
impl ::std::default::Default for Struct_sockaddr_storage {
    fn default() -> Struct_sockaddr_storage {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_Unnamed14 = ::libc::c_uint;
pub const MSG_OOB: ::libc::c_uint = 1;
pub const MSG_PEEK: ::libc::c_uint = 2;
pub const MSG_DONTROUTE: ::libc::c_uint = 4;
pub const MSG_CTRUNC: ::libc::c_uint = 8;
pub const MSG_PROXY: ::libc::c_uint = 16;
pub const MSG_TRUNC: ::libc::c_uint = 32;
pub const MSG_DONTWAIT: ::libc::c_uint = 64;
pub const MSG_EOR: ::libc::c_uint = 128;
pub const MSG_WAITALL: ::libc::c_uint = 256;
pub const MSG_FIN: ::libc::c_uint = 512;
pub const MSG_SYN: ::libc::c_uint = 1024;
pub const MSG_CONFIRM: ::libc::c_uint = 2048;
pub const MSG_RST: ::libc::c_uint = 4096;
pub const MSG_ERRQUEUE: ::libc::c_uint = 8192;
pub const MSG_NOSIGNAL: ::libc::c_uint = 16384;
pub const MSG_MORE: ::libc::c_uint = 32768;
pub const MSG_WAITFORONE: ::libc::c_uint = 65536;
pub const MSG_FASTOPEN: ::libc::c_uint = 536870912;
pub const MSG_CMSG_CLOEXEC: ::libc::c_uint = 1073741824;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_msghdr {
    pub msg_name: *mut ::libc::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut Struct_iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut ::libc::c_void,
    pub msg_controllen: size_t,
    pub msg_flags: ::libc::c_int,
}
impl ::std::default::Default for Struct_msghdr {
    fn default() -> Struct_msghdr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: ::libc::c_int,
    pub cmsg_type: ::libc::c_int,
    pub __cmsg_data: *mut ::libc::c_uchar,
}
impl ::std::default::Default for Struct_cmsghdr {
    fn default() -> Struct_cmsghdr { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed15 = ::libc::c_uint;
pub const SCM_RIGHTS: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_linger {
    pub l_onoff: ::libc::c_int,
    pub l_linger: ::libc::c_int,
}
impl ::std::default::Default for Struct_linger {
    fn default() -> Struct_linger { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_osockaddr {
    pub sa_family: ::libc::c_ushort,
    pub sa_data: [::libc::c_uchar; 14us],
}
impl ::std::default::Default for Struct_osockaddr {
    fn default() -> Struct_osockaddr { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed16 = ::libc::c_uint;
pub const SHUT_RD: ::libc::c_uint = 0;
pub const SHUT_WR: ::libc::c_uint = 1;
pub const SHUT_RDWR: ::libc::c_uint = 2;
pub type in_addr_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_in_addr {
    pub s_addr: in_addr_t,
}
impl ::std::default::Default for Struct_in_addr {
    fn default() -> Struct_in_addr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_opts {
    pub ip_dst: Struct_in_addr,
    pub ip_opts: [::libc::c_char; 40us],
}
impl ::std::default::Default for Struct_ip_opts {
    fn default() -> Struct_ip_opts { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_mreqn {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_address: Struct_in_addr,
    pub imr_ifindex: ::libc::c_int,
}
impl ::std::default::Default for Struct_ip_mreqn {
    fn default() -> Struct_ip_mreqn { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_in_pktinfo {
    pub ipi_ifindex: ::libc::c_int,
    pub ipi_spec_dst: Struct_in_addr,
    pub ipi_addr: Struct_in_addr,
}
impl ::std::default::Default for Struct_in_pktinfo {
    fn default() -> Struct_in_pktinfo { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed17 = ::libc::c_uint;
pub const IPPROTO_IP: ::libc::c_uint = 0;
pub const IPPROTO_ICMP: ::libc::c_uint = 1;
pub const IPPROTO_IGMP: ::libc::c_uint = 2;
pub const IPPROTO_IPIP: ::libc::c_uint = 4;
pub const IPPROTO_TCP: ::libc::c_uint = 6;
pub const IPPROTO_EGP: ::libc::c_uint = 8;
pub const IPPROTO_PUP: ::libc::c_uint = 12;
pub const IPPROTO_UDP: ::libc::c_uint = 17;
pub const IPPROTO_IDP: ::libc::c_uint = 22;
pub const IPPROTO_TP: ::libc::c_uint = 29;
pub const IPPROTO_DCCP: ::libc::c_uint = 33;
pub const IPPROTO_IPV6: ::libc::c_uint = 41;
pub const IPPROTO_RSVP: ::libc::c_uint = 46;
pub const IPPROTO_GRE: ::libc::c_uint = 47;
pub const IPPROTO_ESP: ::libc::c_uint = 50;
pub const IPPROTO_AH: ::libc::c_uint = 51;
pub const IPPROTO_MTP: ::libc::c_uint = 92;
pub const IPPROTO_BEETPH: ::libc::c_uint = 94;
pub const IPPROTO_ENCAP: ::libc::c_uint = 98;
pub const IPPROTO_PIM: ::libc::c_uint = 103;
pub const IPPROTO_COMP: ::libc::c_uint = 108;
pub const IPPROTO_SCTP: ::libc::c_uint = 132;
pub const IPPROTO_UDPLITE: ::libc::c_uint = 136;
pub const IPPROTO_RAW: ::libc::c_uint = 255;
pub const IPPROTO_MAX: ::libc::c_uint = 256;
pub type Enum_Unnamed18 = ::libc::c_uint;
pub const IPPROTO_HOPOPTS: ::libc::c_uint = 0;
pub const IPPROTO_ROUTING: ::libc::c_uint = 43;
pub const IPPROTO_FRAGMENT: ::libc::c_uint = 44;
pub const IPPROTO_ICMPV6: ::libc::c_uint = 58;
pub const IPPROTO_NONE: ::libc::c_uint = 59;
pub const IPPROTO_DSTOPTS: ::libc::c_uint = 60;
pub const IPPROTO_MH: ::libc::c_uint = 135;
pub type in_port_t = uint16_t;
pub type Enum_Unnamed19 = ::libc::c_uint;
pub const IPPORT_ECHO: ::libc::c_uint = 7;
pub const IPPORT_DISCARD: ::libc::c_uint = 9;
pub const IPPORT_SYSTAT: ::libc::c_uint = 11;
pub const IPPORT_DAYTIME: ::libc::c_uint = 13;
pub const IPPORT_NETSTAT: ::libc::c_uint = 15;
pub const IPPORT_FTP: ::libc::c_uint = 21;
pub const IPPORT_TELNET: ::libc::c_uint = 23;
pub const IPPORT_SMTP: ::libc::c_uint = 25;
pub const IPPORT_TIMESERVER: ::libc::c_uint = 37;
pub const IPPORT_NAMESERVER: ::libc::c_uint = 42;
pub const IPPORT_WHOIS: ::libc::c_uint = 43;
pub const IPPORT_MTP: ::libc::c_uint = 57;
pub const IPPORT_TFTP: ::libc::c_uint = 69;
pub const IPPORT_RJE: ::libc::c_uint = 77;
pub const IPPORT_FINGER: ::libc::c_uint = 79;
pub const IPPORT_TTYLINK: ::libc::c_uint = 87;
pub const IPPORT_SUPDUP: ::libc::c_uint = 95;
pub const IPPORT_EXECSERVER: ::libc::c_uint = 512;
pub const IPPORT_LOGINSERVER: ::libc::c_uint = 513;
pub const IPPORT_CMDSERVER: ::libc::c_uint = 514;
pub const IPPORT_EFSSERVER: ::libc::c_uint = 520;
pub const IPPORT_BIFFUDP: ::libc::c_uint = 512;
pub const IPPORT_WHOSERVER: ::libc::c_uint = 513;
pub const IPPORT_ROUTESERVER: ::libc::c_uint = 520;
pub const IPPORT_RESERVED: ::libc::c_uint = 1024;
pub const IPPORT_USERRESERVED: ::libc::c_uint = 5000;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_in6_addr {
    pub __in6_u: Union_Unnamed20,
}
impl ::std::default::Default for Struct_in6_addr {
    fn default() -> Struct_in6_addr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed20 {
    pub _bindgen_data_: [u32; 4us],
}
impl Union_Unnamed20 {
    pub unsafe fn __u6_addr8(&mut self) -> *mut [uint8_t; 16us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __u6_addr16(&mut self) -> *mut [uint16_t; 8us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __u6_addr32(&mut self) -> *mut [uint32_t; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed20 {
    fn default() -> Union_Unnamed20 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: Struct_in_addr,
    pub sin_zero: [::libc::c_uchar; 8us],
}
impl ::std::default::Default for Struct_sockaddr_in {
    fn default() -> Struct_sockaddr_in { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: uint32_t,
    pub sin6_addr: Struct_in6_addr,
    pub sin6_scope_id: uint32_t,
}
impl ::std::default::Default for Struct_sockaddr_in6 {
    fn default() -> Struct_sockaddr_in6 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_mreq {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_interface: Struct_in_addr,
}
impl ::std::default::Default for Struct_ip_mreq {
    fn default() -> Struct_ip_mreq { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_mreq_source {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_interface: Struct_in_addr,
    pub imr_sourceaddr: Struct_in_addr,
}
impl ::std::default::Default for Struct_ip_mreq_source {
    fn default() -> Struct_ip_mreq_source { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ipv6_mreq {
    pub ipv6mr_multiaddr: Struct_in6_addr,
    pub ipv6mr_interface: ::libc::c_uint,
}
impl ::std::default::Default for Struct_ipv6_mreq {
    fn default() -> Struct_ipv6_mreq { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_req {
    pub gr_interface: uint32_t,
    pub gr_group: Struct_sockaddr_storage,
}
impl ::std::default::Default for Struct_group_req {
    fn default() -> Struct_group_req { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_source_req {
    pub gsr_interface: uint32_t,
    pub gsr_group: Struct_sockaddr_storage,
    pub gsr_source: Struct_sockaddr_storage,
}
impl ::std::default::Default for Struct_group_source_req {
    fn default() -> Struct_group_source_req {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_msfilter {
    pub imsf_multiaddr: Struct_in_addr,
    pub imsf_interface: Struct_in_addr,
    pub imsf_fmode: uint32_t,
    pub imsf_numsrc: uint32_t,
    pub imsf_slist: [Struct_in_addr; 1us],
}
impl ::std::default::Default for Struct_ip_msfilter {
    fn default() -> Struct_ip_msfilter { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_filter {
    pub gf_interface: uint32_t,
    pub gf_group: Struct_sockaddr_storage,
    pub gf_fmode: uint32_t,
    pub gf_numsrc: uint32_t,
    pub gf_slist: [Struct_sockaddr_storage; 1us],
}
impl ::std::default::Default for Struct_group_filter {
    fn default() -> Struct_group_filter { unsafe { ::std::mem::zeroed() } }
}
pub type __s8 = ::libc::c_char;
pub type __u8 = ::libc::c_uchar;
pub type __s16 = ::libc::c_short;
pub type __u16 = ::libc::c_ushort;
pub type __s32 = ::libc::c_int;
pub type __u32 = ::libc::c_uint;
pub type __s64 = ::libc::c_longlong;
pub type __u64 = ::libc::c_ulonglong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed21 {
    pub fds_bits: [::libc::c_ulong; 16us],
}
impl ::std::default::Default for Struct_Unnamed21 {
    fn default() -> Struct_Unnamed21 { unsafe { ::std::mem::zeroed() } }
}
pub type __kernel_fd_set = Struct_Unnamed21;
pub type __kernel_sighandler_t =
    ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()>;
pub type __kernel_key_t = ::libc::c_int;
pub type __kernel_mqd_t = ::libc::c_int;
pub type __kernel_old_uid_t = ::libc::c_ushort;
pub type __kernel_old_gid_t = ::libc::c_ushort;
pub type __kernel_old_dev_t = ::libc::c_ulong;
pub type __kernel_long_t = ::libc::c_long;
pub type __kernel_ulong_t = ::libc::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::libc::c_uint;
pub type __kernel_pid_t = ::libc::c_int;
pub type __kernel_ipc_pid_t = ::libc::c_int;
pub type __kernel_uid_t = ::libc::c_uint;
pub type __kernel_gid_t = ::libc::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::libc::c_int;
pub type __kernel_uid32_t = ::libc::c_uint;
pub type __kernel_gid32_t = ::libc::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed22 {
    pub val: [::libc::c_int; 2us],
}
impl ::std::default::Default for Struct_Unnamed22 {
    fn default() -> Struct_Unnamed22 { unsafe { ::std::mem::zeroed() } }
}
pub type __kernel_fsid_t = Struct_Unnamed22;
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::libc::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::libc::c_int;
pub type __kernel_clockid_t = ::libc::c_int;
pub type __kernel_caddr_t = *mut ::libc::c_char;
pub type __kernel_uid16_t = ::libc::c_ushort;
pub type __kernel_gid16_t = ::libc::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13us],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char; 13us],
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Struct___locale_struct { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_obj_watch_t {
    pub addr: [::libc::c_char; 256us],
    pub watcher_id: int64_t,
    pub cookie: uint64_t,
    pub timeout_seconds: uint32_t,
}
impl ::std::default::Default for Struct_obj_watch_t {
    fn default() -> Struct_obj_watch_t { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timezone {
    pub tz_minuteswest: ::libc::c_int,
    pub tz_dsttime: ::libc::c_int,
}
impl ::std::default::Default for Struct_timezone {
    fn default() -> Struct_timezone { unsafe { ::std::mem::zeroed() } }
}
pub type __timezone_ptr_t = *mut Struct_timezone;
pub type Enum___itimer_which = ::libc::c_uint;
pub const ITIMER_REAL: ::libc::c_uint = 0;
pub const ITIMER_VIRTUAL: ::libc::c_uint = 1;
pub const ITIMER_PROF: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_itimerval {
    pub it_interval: Struct_timeval,
    pub it_value: Struct_timeval,
}
impl ::std::default::Default for Struct_itimerval {
    fn default() -> Struct_itimerval { unsafe { ::std::mem::zeroed() } }
}
pub type __itimer_which_t = ::libc::c_int;
pub type Enum_Unnamed23 = ::libc::c_uint;
pub const LIBRADOS_CMPXATTR_OP_EQ: ::libc::c_uint = 1;
pub const LIBRADOS_CMPXATTR_OP_NE: ::libc::c_uint = 2;
pub const LIBRADOS_CMPXATTR_OP_GT: ::libc::c_uint = 3;
pub const LIBRADOS_CMPXATTR_OP_GTE: ::libc::c_uint = 4;
pub const LIBRADOS_CMPXATTR_OP_LT: ::libc::c_uint = 5;
pub const LIBRADOS_CMPXATTR_OP_LTE: ::libc::c_uint = 6;
pub type Enum_Unnamed24 = ::libc::c_uint;
pub const LIBRADOS_OPERATION_NOFLAG: ::libc::c_uint = 0;
pub const LIBRADOS_OPERATION_BALANCE_READS: ::libc::c_uint = 1;
pub const LIBRADOS_OPERATION_LOCALIZE_READS: ::libc::c_uint = 2;
pub const LIBRADOS_OPERATION_ORDER_READS_WRITES: ::libc::c_uint = 4;
pub const LIBRADOS_OPERATION_IGNORE_CACHE: ::libc::c_uint = 8;
pub const LIBRADOS_OPERATION_SKIPRWLOCKS: ::libc::c_uint = 16;
pub const LIBRADOS_OPERATION_IGNORE_OVERLAY: ::libc::c_uint = 32;
pub type rados_t = *mut ::libc::c_void;
pub type rados_config_t = *mut ::libc::c_void;
pub type rados_ioctx_t = *mut ::libc::c_void;
pub type rados_list_ctx_t = *mut ::libc::c_void;
pub type rados_snap_t = uint64_t;
pub type rados_xattrs_iter_t = *mut ::libc::c_void;
pub type rados_omap_iter_t = *mut ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rados_pool_stat_t {
    pub num_bytes: uint64_t,
    pub num_kb: uint64_t,
    pub num_objects: uint64_t,
    pub num_object_clones: uint64_t,
    pub num_object_copies: uint64_t,
    pub num_objects_missing_on_primary: uint64_t,
    pub num_objects_unfound: uint64_t,
    pub num_objects_degraded: uint64_t,
    pub num_rd: uint64_t,
    pub num_rd_kb: uint64_t,
    pub num_wr: uint64_t,
    pub num_wr_kb: uint64_t,
}
impl ::std::default::Default for Struct_rados_pool_stat_t {
    fn default() -> Struct_rados_pool_stat_t {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rados_cluster_stat_t {
    pub kb: uint64_t,
    pub kb_used: uint64_t,
    pub kb_avail: uint64_t,
    pub num_objects: uint64_t,
}
impl ::std::default::Default for Struct_rados_cluster_stat_t {
    fn default() -> Struct_rados_cluster_stat_t {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type rados_write_op_t = *mut ::libc::c_void;
pub type rados_read_op_t = *mut ::libc::c_void;
pub type rados_completion_t = *mut ::libc::c_void;
pub type rados_callback_t =
    ::std::option::Option<extern "C" fn
                              (cb: rados_completion_t,
                               arg: *mut ::libc::c_void) -> ()>;
pub type rados_watchcb_t =
    ::std::option::Option<extern "C" fn
                              (opcode: uint8_t, ver: uint64_t,
                               arg: *mut ::libc::c_void) -> ()>;
pub type rados_log_callback_t =
    ::std::option::Option<extern "C" fn
                              (arg: *mut ::libc::c_void,
                               line: *const ::libc::c_char,
                               who: *const ::libc::c_char, sec: uint64_t,
                               nsec: uint64_t, seq: uint64_t,
                               level: *const ::libc::c_char,
                               msg: *const ::libc::c_char) -> ()>;
#[link(name = "rados")]
extern "C" {
    pub static in6addr_any: Struct_in6_addr;
    pub static in6addr_loopback: Struct_in6_addr;
}
#[link(name = "rados")]
extern "C" {
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn readv(__fd: ::libc::c_int, __iovec: *const Struct_iovec,
                 __count: ::libc::c_int) -> ssize_t;
    pub fn writev(__fd: ::libc::c_int, __iovec: *const Struct_iovec,
                  __count: ::libc::c_int) -> ssize_t;
    pub fn preadv(__fd: ::libc::c_int, __iovec: *const Struct_iovec,
                  __count: ::libc::c_int, __offset: __off_t) -> ssize_t;
    pub fn pwritev(__fd: ::libc::c_int, __iovec: *const Struct_iovec,
                   __count: ::libc::c_int, __offset: __off_t) -> ssize_t;
    pub fn __cmsg_nxthdr(__mhdr: *mut Struct_msghdr,
                         __cmsg: *mut Struct_cmsghdr) -> *mut Struct_cmsghdr;
    pub fn socket(__domain: ::libc::c_int, __type: ::libc::c_int,
                  __protocol: ::libc::c_int) -> ::libc::c_int;
    pub fn socketpair(__domain: ::libc::c_int, __type: ::libc::c_int,
                      __protocol: ::libc::c_int, __fds: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn bind(__fd: ::libc::c_int, __addr: *const Struct_sockaddr,
                __len: socklen_t) -> ::libc::c_int;
    pub fn getsockname(__fd: ::libc::c_int, __addr: *mut Struct_sockaddr,
                       __len: *mut socklen_t) -> ::libc::c_int;
    pub fn connect(__fd: ::libc::c_int, __addr: *const Struct_sockaddr,
                   __len: socklen_t) -> ::libc::c_int;
    pub fn getpeername(__fd: ::libc::c_int, __addr: *mut Struct_sockaddr,
                       __len: *mut socklen_t) -> ::libc::c_int;
    pub fn send(__fd: ::libc::c_int, __buf: *const ::libc::c_void,
                __n: size_t, __flags: ::libc::c_int) -> ssize_t;
    pub fn recv(__fd: ::libc::c_int, __buf: *mut ::libc::c_void, __n: size_t,
                __flags: ::libc::c_int) -> ssize_t;
    pub fn sendto(__fd: ::libc::c_int, __buf: *const ::libc::c_void,
                  __n: size_t, __flags: ::libc::c_int,
                  __addr: *const Struct_sockaddr, __addr_len: socklen_t)
     -> ssize_t;
    pub fn recvfrom(__fd: ::libc::c_int, __buf: *mut ::libc::c_void,
                    __n: size_t, __flags: ::libc::c_int,
                    __addr: *mut Struct_sockaddr, __addr_len: *mut socklen_t)
     -> ssize_t;
    pub fn sendmsg(__fd: ::libc::c_int, __message: *const Struct_msghdr,
                   __flags: ::libc::c_int) -> ssize_t;
    pub fn recvmsg(__fd: ::libc::c_int, __message: *mut Struct_msghdr,
                   __flags: ::libc::c_int) -> ssize_t;
    pub fn getsockopt(__fd: ::libc::c_int, __level: ::libc::c_int,
                      __optname: ::libc::c_int, __optval: *mut ::libc::c_void,
                      __optlen: *mut socklen_t) -> ::libc::c_int;
    pub fn setsockopt(__fd: ::libc::c_int, __level: ::libc::c_int,
                      __optname: ::libc::c_int,
                      __optval: *const ::libc::c_void, __optlen: socklen_t)
     -> ::libc::c_int;
    pub fn listen(__fd: ::libc::c_int, __n: ::libc::c_int) -> ::libc::c_int;
    pub fn accept(__fd: ::libc::c_int, __addr: *mut Struct_sockaddr,
                  __addr_len: *mut socklen_t) -> ::libc::c_int;
    pub fn shutdown(__fd: ::libc::c_int, __how: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sockatmark(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn isfdtype(__fd: ::libc::c_int, __fdtype: ::libc::c_int)
     -> ::libc::c_int;
    pub fn ntohl(__netlong: uint32_t) -> uint32_t;
    pub fn ntohs(__netshort: uint16_t) -> uint16_t;
    pub fn htonl(__hostlong: uint32_t) -> uint32_t;
    pub fn htons(__hostshort: uint16_t) -> uint16_t;
    pub fn bindresvport(__sockfd: ::libc::c_int,
                        __sock_in: *mut Struct_sockaddr_in) -> ::libc::c_int;
    pub fn bindresvport6(__sockfd: ::libc::c_int,
                         __sock_in: *mut Struct_sockaddr_in6)
     -> ::libc::c_int;
    pub fn memcpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                  __n: size_t) -> *mut ::libc::c_void;
    pub fn memmove(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __n: size_t) -> *mut ::libc::c_void;
    pub fn memccpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __c: ::libc::c_int, __n: size_t) -> *mut ::libc::c_void;
    pub fn memset(__s: *mut ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn memcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                  __n: size_t) -> ::libc::c_int;
    pub fn memchr(__s: *const ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn strcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strncmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                   __n: size_t) -> ::libc::c_int;
    pub fn strcoll(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strxfrm(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> size_t;
    pub fn strcoll_l(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                     __l: __locale_t) -> ::libc::c_int;
    pub fn strxfrm_l(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strndup(__string: *const ::libc::c_char, __n: size_t)
     -> *mut ::libc::c_char;
    pub fn strchr(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strrchr(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strcspn(__s: *const ::libc::c_char,
                   __reject: *const ::libc::c_char) -> size_t;
    pub fn strspn(__s: *const ::libc::c_char, __accept: *const ::libc::c_char)
     -> size_t;
    pub fn strpbrk(__s: *const ::libc::c_char,
                   __accept: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strstr(__haystack: *const ::libc::c_char,
                  __needle: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strtok(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __strtok_r(__s: *mut ::libc::c_char,
                      __delim: *const ::libc::c_char,
                      __save_ptr: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strtok_r(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char,
                    __save_ptr: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strlen(__s: *const ::libc::c_char) -> size_t;
    pub fn strnlen(__string: *const ::libc::c_char, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strerror_r(__errnum: ::libc::c_int, __buf: *mut ::libc::c_char,
                      __buflen: size_t) -> ::libc::c_int;
    pub fn strerror_l(__errnum: ::libc::c_int, __l: __locale_t)
     -> *mut ::libc::c_char;
    pub fn __bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcopy(__src: *const ::libc::c_void, __dest: *mut ::libc::c_void,
                 __n: size_t) -> ();
    pub fn bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                __n: size_t) -> ::libc::c_int;
    pub fn index(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn rindex(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn ffs(__i: ::libc::c_int) -> ::libc::c_int;
    pub fn strcasecmp(__s1: *const ::libc::c_char,
                      __s2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strncasecmp(__s1: *const ::libc::c_char,
                       __s2: *const ::libc::c_char, __n: size_t)
     -> ::libc::c_int;
    pub fn strsep(__stringp: *mut *mut ::libc::c_char,
                  __delim: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strsignal(__sig: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn __stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __stpncpy(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t)
     -> *mut ::libc::c_char;
    pub fn stpncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn gettimeofday(__tv: *mut Struct_timeval, __tz: __timezone_ptr_t)
     -> ::libc::c_int;
    pub fn settimeofday(__tv: *const Struct_timeval,
                        __tz: *const Struct_timezone) -> ::libc::c_int;
    pub fn adjtime(__delta: *const Struct_timeval,
                   __olddelta: *mut Struct_timeval) -> ::libc::c_int;
    pub fn getitimer(__which: __itimer_which_t,
                     __value: *mut Struct_itimerval) -> ::libc::c_int;
    pub fn setitimer(__which: __itimer_which_t,
                     __new: *const Struct_itimerval,
                     __old: *mut Struct_itimerval) -> ::libc::c_int;
    pub fn utimes(__file: *const ::libc::c_char, __tvp: *mut Struct_timeval)
     -> ::libc::c_int;
    pub fn lutimes(__file: *const ::libc::c_char, __tvp: *mut Struct_timeval)
     -> ::libc::c_int;
    pub fn futimes(__fd: ::libc::c_int, __tvp: *mut Struct_timeval)
     -> ::libc::c_int;
    pub fn rados_version(major: *mut ::libc::c_int, minor: *mut ::libc::c_int,
                         extra: *mut ::libc::c_int) -> ();
    pub fn rados_create(cluster: *mut rados_t, id: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rados_create2(pcluster: *mut rados_t,
                         clustername: *const ::libc::c_char,
                         name: *const ::libc::c_char, flags: uint64_t)
     -> ::libc::c_int;
    pub fn rados_create_with_context(cluster: *mut rados_t,
                                     cct: rados_config_t) -> ::libc::c_int;
    pub fn rados_ping_monitor(cluster: rados_t, mon_id: *const ::libc::c_char,
                              outstr: *mut *mut ::libc::c_char,
                              outstrlen: *mut size_t) -> ::libc::c_int;
    pub fn rados_connect(cluster: rados_t) -> ::libc::c_int;
    pub fn rados_shutdown(cluster: rados_t) -> ();
    pub fn rados_conf_read_file(cluster: rados_t, path: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rados_conf_parse_argv(cluster: rados_t, argc: ::libc::c_int,
                                 argv: *mut *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rados_conf_parse_argv_remainder(cluster: rados_t,
                                           argc: ::libc::c_int,
                                           argv: *mut *const ::libc::c_char,
                                           remargv:
                                               *mut *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rados_conf_parse_env(cluster: rados_t, var: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rados_conf_set(cluster: rados_t, option: *const ::libc::c_char,
                          value: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rados_conf_get(cluster: rados_t, option: *const ::libc::c_char,
                          buf: *mut ::libc::c_char, len: size_t)
     -> ::libc::c_int;
    pub fn rados_cluster_stat(cluster: rados_t,
                              result: *mut Struct_rados_cluster_stat_t)
     -> ::libc::c_int;
    pub fn rados_cluster_fsid(cluster: rados_t, buf: *mut ::libc::c_char,
                              len: size_t) -> ::libc::c_int;
    pub fn rados_wait_for_latest_osdmap(cluster: rados_t) -> ::libc::c_int;
    pub fn rados_pool_list(cluster: rados_t, buf: *mut ::libc::c_char,
                           len: size_t) -> ::libc::c_int;
    pub fn rados_cct(cluster: rados_t) -> rados_config_t;
    pub fn rados_get_instance_id(cluster: rados_t) -> uint64_t;
    pub fn rados_ioctx_create(cluster: rados_t,
                              pool_name: *const ::libc::c_char,
                              ioctx: *mut rados_ioctx_t) -> ::libc::c_int;
    pub fn rados_ioctx_destroy(io: rados_ioctx_t) -> ();
    pub fn rados_ioctx_cct(io: rados_ioctx_t) -> rados_config_t;
    pub fn rados_ioctx_get_cluster(io: rados_ioctx_t) -> rados_t;
    pub fn rados_ioctx_pool_stat(io: rados_ioctx_t,
                                 stats: *mut Struct_rados_pool_stat_t)
     -> ::libc::c_int;
    pub fn rados_pool_lookup(cluster: rados_t,
                             pool_name: *const ::libc::c_char) -> int64_t;
    pub fn rados_pool_reverse_lookup(cluster: rados_t, id: int64_t,
                                     buf: *mut ::libc::c_char, maxlen: size_t)
     -> ::libc::c_int;
    pub fn rados_pool_create(cluster: rados_t,
                             pool_name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rados_pool_create_with_auid(cluster: rados_t,
                                       pool_name: *const ::libc::c_char,
                                       auid: uint64_t) -> ::libc::c_int;
    pub fn rados_pool_create_with_crush_rule(cluster: rados_t,
                                             pool_name: *const ::libc::c_char,
                                             crush_rule_num: uint8_t)
     -> ::libc::c_int;
    pub fn rados_pool_create_with_all(cluster: rados_t,
                                      pool_name: *const ::libc::c_char,
                                      auid: uint64_t, crush_rule_num: uint8_t)
     -> ::libc::c_int;
    pub fn rados_pool_delete(cluster: rados_t,
                             pool_name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rados_ioctx_pool_set_auid(io: rados_ioctx_t, auid: uint64_t)
     -> ::libc::c_int;
    pub fn rados_ioctx_pool_get_auid(io: rados_ioctx_t, auid: *mut uint64_t)
     -> ::libc::c_int;
    pub fn rados_ioctx_pool_requires_alignment(io: rados_ioctx_t)
     -> ::libc::c_int;
    pub fn rados_ioctx_pool_required_alignment(io: rados_ioctx_t) -> uint64_t;
    pub fn rados_ioctx_get_id(io: rados_ioctx_t) -> int64_t;
    pub fn rados_ioctx_get_pool_name(io: rados_ioctx_t,
                                     buf: *mut ::libc::c_char,
                                     maxlen: ::libc::c_uint) -> ::libc::c_int;
    pub fn rados_ioctx_locator_set_key(io: rados_ioctx_t,
                                       key: *const ::libc::c_char) -> ();
    pub fn rados_ioctx_set_namespace(io: rados_ioctx_t,
                                     nspace: *const ::libc::c_char) -> ();
    pub fn rados_objects_list_open(io: rados_ioctx_t,
                                   ctx: *mut rados_list_ctx_t)
     -> ::libc::c_int;
    pub fn rados_objects_list_get_pg_hash_position(ctx: rados_list_ctx_t)
     -> uint32_t;
    pub fn rados_objects_list_seek(ctx: rados_list_ctx_t, pos: uint32_t)
     -> uint32_t;
    pub fn rados_objects_list_next(ctx: rados_list_ctx_t,
                                   entry: *mut *const ::libc::c_char,
                                   key: *mut *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rados_objects_list_close(ctx: rados_list_ctx_t) -> ();
    pub fn rados_ioctx_snap_create(io: rados_ioctx_t,
                                   snapname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rados_ioctx_snap_remove(io: rados_ioctx_t,
                                   snapname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rados_ioctx_snap_rollback(io: rados_ioctx_t,
                                     oid: *const ::libc::c_char,
                                     snapname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rados_rollback(io: rados_ioctx_t, oid: *const ::libc::c_char,
                          snapname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rados_ioctx_snap_set_read(io: rados_ioctx_t, snap: rados_snap_t)
     -> ();
    pub fn rados_ioctx_selfmanaged_snap_create(io: rados_ioctx_t,
                                               snapid: *mut rados_snap_t)
     -> ::libc::c_int;
    pub fn rados_ioctx_selfmanaged_snap_remove(io: rados_ioctx_t,
                                               snapid: rados_snap_t)
     -> ::libc::c_int;
    pub fn rados_ioctx_selfmanaged_snap_rollback(io: rados_ioctx_t,
                                                 oid: *const ::libc::c_char,
                                                 snapid: rados_snap_t)
     -> ::libc::c_int;
    pub fn rados_ioctx_selfmanaged_snap_set_write_ctx(io: rados_ioctx_t,
                                                      seq: rados_snap_t,
                                                      snaps:
                                                          *mut rados_snap_t,
                                                      num_snaps:
                                                          ::libc::c_int)
     -> ::libc::c_int;
    pub fn rados_ioctx_snap_list(io: rados_ioctx_t, snaps: *mut rados_snap_t,
                                 maxlen: ::libc::c_int) -> ::libc::c_int;
    pub fn rados_ioctx_snap_lookup(io: rados_ioctx_t,
                                   name: *const ::libc::c_char,
                                   id: *mut rados_snap_t) -> ::libc::c_int;
    pub fn rados_ioctx_snap_get_name(io: rados_ioctx_t, id: rados_snap_t,
                                     name: *mut ::libc::c_char,
                                     maxlen: ::libc::c_int) -> ::libc::c_int;
    pub fn rados_ioctx_snap_get_stamp(io: rados_ioctx_t, id: rados_snap_t,
                                      t: *mut time_t) -> ::libc::c_int;
    pub fn rados_get_last_version(io: rados_ioctx_t) -> uint64_t;
    pub fn rados_write(io: rados_ioctx_t, oid: *const ::libc::c_char,
                       buf: *const ::libc::c_char, len: size_t, off: uint64_t)
     -> ::libc::c_int;
    pub fn rados_write_full(io: rados_ioctx_t, oid: *const ::libc::c_char,
                            buf: *const ::libc::c_char, len: size_t)
     -> ::libc::c_int;
    pub fn rados_clone_range(io: rados_ioctx_t, dst: *const ::libc::c_char,
                             dst_off: uint64_t, src: *const ::libc::c_char,
                             src_off: uint64_t, len: size_t) -> ::libc::c_int;
    pub fn rados_append(io: rados_ioctx_t, oid: *const ::libc::c_char,
                        buf: *const ::libc::c_char, len: size_t)
     -> ::libc::c_int;
    pub fn rados_read(io: rados_ioctx_t, oid: *const ::libc::c_char,
                      buf: *mut ::libc::c_char, len: size_t, off: uint64_t)
     -> ::libc::c_int;
    pub fn rados_remove(io: rados_ioctx_t, oid: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rados_trunc(io: rados_ioctx_t, oid: *const ::libc::c_char,
                       size: uint64_t) -> ::libc::c_int;
    pub fn rados_getxattr(io: rados_ioctx_t, o: *const ::libc::c_char,
                          name: *const ::libc::c_char,
                          buf: *mut ::libc::c_char, len: size_t)
     -> ::libc::c_int;
    pub fn rados_setxattr(io: rados_ioctx_t, o: *const ::libc::c_char,
                          name: *const ::libc::c_char,
                          buf: *const ::libc::c_char, len: size_t)
     -> ::libc::c_int;
    pub fn rados_rmxattr(io: rados_ioctx_t, o: *const ::libc::c_char,
                         name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rados_getxattrs(io: rados_ioctx_t, oid: *const ::libc::c_char,
                           iter: *mut rados_xattrs_iter_t) -> ::libc::c_int;
    pub fn rados_getxattrs_next(iter: rados_xattrs_iter_t,
                                name: *mut *const ::libc::c_char,
                                val: *mut *const ::libc::c_char,
                                len: *mut size_t) -> ::libc::c_int;
    pub fn rados_getxattrs_end(iter: rados_xattrs_iter_t) -> ();
    pub fn rados_omap_get_next(iter: rados_omap_iter_t,
                               key: *mut *mut ::libc::c_char,
                               val: *mut *mut ::libc::c_char,
                               len: *mut size_t) -> ::libc::c_int;
    pub fn rados_omap_get_end(iter: rados_omap_iter_t) -> ();
    pub fn rados_stat(io: rados_ioctx_t, o: *const ::libc::c_char,
                      psize: *mut uint64_t, pmtime: *mut time_t)
     -> ::libc::c_int;
    pub fn rados_tmap_update(io: rados_ioctx_t, o: *const ::libc::c_char,
                             cmdbuf: *const ::libc::c_char, cmdbuflen: size_t)
     -> ::libc::c_int;
    pub fn rados_tmap_put(io: rados_ioctx_t, o: *const ::libc::c_char,
                          buf: *const ::libc::c_char, buflen: size_t)
     -> ::libc::c_int;
    pub fn rados_tmap_get(io: rados_ioctx_t, o: *const ::libc::c_char,
                          buf: *mut ::libc::c_char, buflen: size_t)
     -> ::libc::c_int;
    pub fn rados_exec(io: rados_ioctx_t, oid: *const ::libc::c_char,
                      cls: *const ::libc::c_char,
                      method: *const ::libc::c_char,
                      in_buf: *const ::libc::c_char, in_len: size_t,
                      buf: *mut ::libc::c_char, out_len: size_t)
     -> ::libc::c_int;
    pub fn rados_aio_create_completion(cb_arg: *mut ::libc::c_void,
                                       cb_complete: rados_callback_t,
                                       cb_safe: rados_callback_t,
                                       pc: *mut rados_completion_t)
     -> ::libc::c_int;
    pub fn rados_aio_wait_for_complete(c: rados_completion_t)
     -> ::libc::c_int;
    pub fn rados_aio_wait_for_safe(c: rados_completion_t) -> ::libc::c_int;
    pub fn rados_aio_is_complete(c: rados_completion_t) -> ::libc::c_int;
    pub fn rados_aio_is_safe(c: rados_completion_t) -> ::libc::c_int;
    pub fn rados_aio_wait_for_complete_and_cb(c: rados_completion_t)
     -> ::libc::c_int;
    pub fn rados_aio_wait_for_safe_and_cb(c: rados_completion_t)
     -> ::libc::c_int;
    pub fn rados_aio_is_complete_and_cb(c: rados_completion_t)
     -> ::libc::c_int;
    pub fn rados_aio_is_safe_and_cb(c: rados_completion_t) -> ::libc::c_int;
    pub fn rados_aio_get_return_value(c: rados_completion_t) -> ::libc::c_int;
    pub fn rados_aio_release(c: rados_completion_t) -> ();
    pub fn rados_aio_write(io: rados_ioctx_t, oid: *const ::libc::c_char,
                           completion: rados_completion_t,
                           buf: *const ::libc::c_char, len: size_t,
                           off: uint64_t) -> ::libc::c_int;
    pub fn rados_aio_append(io: rados_ioctx_t, oid: *const ::libc::c_char,
                            completion: rados_completion_t,
                            buf: *const ::libc::c_char, len: size_t)
     -> ::libc::c_int;
    pub fn rados_aio_write_full(io: rados_ioctx_t, oid: *const ::libc::c_char,
                                completion: rados_completion_t,
                                buf: *const ::libc::c_char, len: size_t)
     -> ::libc::c_int;
    pub fn rados_aio_remove(io: rados_ioctx_t, oid: *const ::libc::c_char,
                            completion: rados_completion_t) -> ::libc::c_int;
    pub fn rados_aio_read(io: rados_ioctx_t, oid: *const ::libc::c_char,
                          completion: rados_completion_t,
                          buf: *mut ::libc::c_char, len: size_t,
                          off: uint64_t) -> ::libc::c_int;
    pub fn rados_aio_flush(io: rados_ioctx_t) -> ::libc::c_int;
    pub fn rados_aio_flush_async(io: rados_ioctx_t,
                                 completion: rados_completion_t)
     -> ::libc::c_int;
    pub fn rados_aio_stat(io: rados_ioctx_t, o: *const ::libc::c_char,
                          completion: rados_completion_t,
                          psize: *mut uint64_t, pmtime: *mut time_t)
     -> ::libc::c_int;
    pub fn rados_aio_cancel(io: rados_ioctx_t, completion: rados_completion_t)
     -> ::libc::c_int;
    pub fn rados_watch(io: rados_ioctx_t, o: *const ::libc::c_char,
                       ver: uint64_t, handle: *mut uint64_t,
                       watchcb: rados_watchcb_t, arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn rados_unwatch(io: rados_ioctx_t, o: *const ::libc::c_char,
                         handle: uint64_t) -> ::libc::c_int;
    pub fn rados_notify(io: rados_ioctx_t, o: *const ::libc::c_char,
                        ver: uint64_t, buf: *const ::libc::c_char,
                        buf_len: ::libc::c_int) -> ::libc::c_int;
    pub fn rados_set_alloc_hint(io: rados_ioctx_t, o: *const ::libc::c_char,
                                expected_object_size: uint64_t,
                                expected_write_size: uint64_t)
     -> ::libc::c_int;
    pub fn rados_create_write_op() -> rados_write_op_t;
    pub fn rados_release_write_op(write_op: rados_write_op_t) -> ();
    pub fn rados_write_op_set_flags(write_op: rados_write_op_t,
                                    flags: ::libc::c_int) -> ();
    pub fn rados_write_op_assert_exists(write_op: rados_write_op_t) -> ();
    pub fn rados_write_op_cmpxattr(write_op: rados_write_op_t,
                                   name: *const ::libc::c_char,
                                   comparison_operator: uint8_t,
                                   value: *const ::libc::c_char,
                                   value_len: size_t) -> ();
    pub fn rados_write_op_omap_cmp(write_op: rados_write_op_t,
                                   key: *const ::libc::c_char,
                                   comparison_operator: uint8_t,
                                   val: *const ::libc::c_char,
                                   val_len: size_t, prval: *mut ::libc::c_int)
     -> ();
    pub fn rados_write_op_setxattr(write_op: rados_write_op_t,
                                   name: *const ::libc::c_char,
                                   value: *const ::libc::c_char,
                                   value_len: size_t) -> ();
    pub fn rados_write_op_rmxattr(write_op: rados_write_op_t,
                                  name: *const ::libc::c_char) -> ();
    pub fn rados_write_op_create(write_op: rados_write_op_t,
                                 exclusive: ::libc::c_int,
                                 category: *const ::libc::c_char) -> ();
    pub fn rados_write_op_write(write_op: rados_write_op_t,
                                buffer: *const ::libc::c_char, len: size_t,
                                offset: uint64_t) -> ();
    pub fn rados_write_op_write_full(write_op: rados_write_op_t,
                                     buffer: *const ::libc::c_char,
                                     len: size_t) -> ();
    pub fn rados_write_op_append(write_op: rados_write_op_t,
                                 buffer: *const ::libc::c_char, len: size_t)
     -> ();
    pub fn rados_write_op_remove(write_op: rados_write_op_t) -> ();
    pub fn rados_write_op_truncate(write_op: rados_write_op_t,
                                   offset: uint64_t) -> ();
    pub fn rados_write_op_zero(write_op: rados_write_op_t, offset: uint64_t,
                               len: uint64_t) -> ();
    pub fn rados_write_op_exec(write_op: rados_write_op_t,
                               cls: *const ::libc::c_char,
                               method: *const ::libc::c_char,
                               in_buf: *const ::libc::c_char, in_len: size_t,
                               prval: *mut ::libc::c_int) -> ();
    pub fn rados_write_op_omap_set(write_op: rados_write_op_t,
                                   keys: *const *const ::libc::c_char,
                                   vals: *const *const ::libc::c_char,
                                   lens: *const size_t, num: size_t) -> ();
    pub fn rados_write_op_omap_rm_keys(write_op: rados_write_op_t,
                                       keys: *const *const ::libc::c_char,
                                       keys_len: size_t) -> ();
    pub fn rados_write_op_omap_clear(write_op: rados_write_op_t) -> ();
    pub fn rados_write_op_set_alloc_hint(write_op: rados_write_op_t,
                                         expected_object_size: uint64_t,
                                         expected_write_size: uint64_t) -> ();
    pub fn rados_write_op_operate(write_op: rados_write_op_t,
                                  io: rados_ioctx_t,
                                  oid: *const ::libc::c_char,
                                  mtime: *mut time_t, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn rados_aio_write_op_operate(write_op: rados_write_op_t,
                                      io: rados_ioctx_t,
                                      completion: rados_completion_t,
                                      oid: *const ::libc::c_char,
                                      mtime: *mut time_t,
                                      flags: ::libc::c_int) -> ::libc::c_int;
    pub fn rados_create_read_op() -> rados_read_op_t;
    pub fn rados_release_read_op(read_op: rados_read_op_t) -> ();
    pub fn rados_read_op_set_flags(read_op: rados_read_op_t,
                                   flags: ::libc::c_int) -> ();
    pub fn rados_read_op_assert_exists(read_op: rados_read_op_t) -> ();
    pub fn rados_read_op_cmpxattr(read_op: rados_read_op_t,
                                  name: *const ::libc::c_char,
                                  comparison_operator: uint8_t,
                                  value: *const ::libc::c_char,
                                  value_len: size_t) -> ();
    pub fn rados_read_op_getxattrs(read_op: rados_read_op_t,
                                   iter: *mut rados_xattrs_iter_t,
                                   prval: *mut ::libc::c_int) -> ();
    pub fn rados_read_op_omap_cmp(read_op: rados_read_op_t,
                                  key: *const ::libc::c_char,
                                  comparison_operator: uint8_t,
                                  val: *const ::libc::c_char, val_len: size_t,
                                  prval: *mut ::libc::c_int) -> ();
    pub fn rados_read_op_stat(read_op: rados_read_op_t, psize: *mut uint64_t,
                              pmtime: *mut time_t, prval: *mut ::libc::c_int)
     -> ();
    pub fn rados_read_op_read(read_op: rados_read_op_t, offset: uint64_t,
                              len: size_t, buf: *mut ::libc::c_char,
                              bytes_read: *mut size_t,
                              prval: *mut ::libc::c_int) -> ();
    pub fn rados_read_op_exec(read_op: rados_read_op_t,
                              cls: *const ::libc::c_char,
                              method: *const ::libc::c_char,
                              in_buf: *const ::libc::c_char, in_len: size_t,
                              out_buf: *mut *mut ::libc::c_char,
                              out_len: *mut size_t, prval: *mut ::libc::c_int)
     -> ();
    pub fn rados_read_op_exec_user_buf(read_op: rados_read_op_t,
                                       cls: *const ::libc::c_char,
                                       method: *const ::libc::c_char,
                                       in_buf: *const ::libc::c_char,
                                       in_len: size_t,
                                       out_buf: *mut ::libc::c_char,
                                       out_len: size_t, used_len: *mut size_t,
                                       prval: *mut ::libc::c_int) -> ();
    pub fn rados_read_op_omap_get_vals(read_op: rados_read_op_t,
                                       start_after: *const ::libc::c_char,
                                       filter_prefix: *const ::libc::c_char,
                                       max_return: uint64_t,
                                       iter: *mut rados_omap_iter_t,
                                       prval: *mut ::libc::c_int) -> ();
    pub fn rados_read_op_omap_get_keys(read_op: rados_read_op_t,
                                       start_after: *const ::libc::c_char,
                                       max_return: uint64_t,
                                       iter: *mut rados_omap_iter_t,
                                       prval: *mut ::libc::c_int) -> ();
    pub fn rados_read_op_omap_get_vals_by_keys(read_op: rados_read_op_t,
                                               keys:
                                                   *const *const ::libc::c_char,
                                               keys_len: size_t,
                                               iter: *mut rados_omap_iter_t,
                                               prval: *mut ::libc::c_int)
     -> ();
    pub fn rados_read_op_operate(read_op: rados_read_op_t, io: rados_ioctx_t,
                                 oid: *const ::libc::c_char,
                                 flags: ::libc::c_int) -> ::libc::c_int;
    pub fn rados_aio_read_op_operate(read_op: rados_read_op_t,
                                     io: rados_ioctx_t,
                                     completion: rados_completion_t,
                                     oid: *const ::libc::c_char,
                                     flags: ::libc::c_int) -> ::libc::c_int;
    pub fn rados_lock_exclusive(io: rados_ioctx_t, o: *const ::libc::c_char,
                                name: *const ::libc::c_char,
                                cookie: *const ::libc::c_char,
                                desc: *const ::libc::c_char,
                                duration: *mut Struct_timeval, flags: uint8_t)
     -> ::libc::c_int;
    pub fn rados_lock_shared(io: rados_ioctx_t, o: *const ::libc::c_char,
                             name: *const ::libc::c_char,
                             cookie: *const ::libc::c_char,
                             tag: *const ::libc::c_char,
                             desc: *const ::libc::c_char,
                             duration: *mut Struct_timeval, flags: uint8_t)
     -> ::libc::c_int;
    pub fn rados_unlock(io: rados_ioctx_t, o: *const ::libc::c_char,
                        name: *const ::libc::c_char,
                        cookie: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rados_list_lockers(io: rados_ioctx_t, o: *const ::libc::c_char,
                              name: *const ::libc::c_char,
                              exclusive: *mut ::libc::c_int,
                              tag: *mut ::libc::c_char, tag_len: *mut size_t,
                              clients: *mut ::libc::c_char,
                              clients_len: *mut size_t,
                              cookies: *mut ::libc::c_char,
                              cookies_len: *mut size_t,
                              addrs: *mut ::libc::c_char,
                              addrs_len: *mut size_t) -> ssize_t;
    pub fn rados_break_lock(io: rados_ioctx_t, o: *const ::libc::c_char,
                            name: *const ::libc::c_char,
                            client: *const ::libc::c_char,
                            cookie: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rados_mon_command(cluster: rados_t,
                             cmd: *mut *const ::libc::c_char, cmdlen: size_t,
                             inbuf: *const ::libc::c_char, inbuflen: size_t,
                             outbuf: *mut *mut ::libc::c_char,
                             outbuflen: *mut size_t,
                             outs: *mut *mut ::libc::c_char,
                             outslen: *mut size_t) -> ::libc::c_int;
    pub fn rados_mon_command_target(cluster: rados_t,
                                    name: *const ::libc::c_char,
                                    cmd: *mut *const ::libc::c_char,
                                    cmdlen: size_t,
                                    inbuf: *const ::libc::c_char,
                                    inbuflen: size_t,
                                    outbuf: *mut *mut ::libc::c_char,
                                    outbuflen: *mut size_t,
                                    outs: *mut *mut ::libc::c_char,
                                    outslen: *mut size_t) -> ::libc::c_int;
    pub fn rados_buffer_free(buf: *mut ::libc::c_char) -> ();
    pub fn rados_osd_command(cluster: rados_t, osdid: ::libc::c_int,
                             cmd: *mut *const ::libc::c_char, cmdlen: size_t,
                             inbuf: *const ::libc::c_char, inbuflen: size_t,
                             outbuf: *mut *mut ::libc::c_char,
                             outbuflen: *mut size_t,
                             outs: *mut *mut ::libc::c_char,
                             outslen: *mut size_t) -> ::libc::c_int;
    pub fn rados_pg_command(cluster: rados_t, pgstr: *const ::libc::c_char,
                            cmd: *mut *const ::libc::c_char, cmdlen: size_t,
                            inbuf: *const ::libc::c_char, inbuflen: size_t,
                            outbuf: *mut *mut ::libc::c_char,
                            outbuflen: *mut size_t,
                            outs: *mut *mut ::libc::c_char,
                            outslen: *mut size_t) -> ::libc::c_int;
    pub fn rados_monitor_log(cluster: rados_t, level: *const ::libc::c_char,
                             cb: rados_log_callback_t,
                             arg: *mut ::libc::c_void) -> ::libc::c_int;
}
